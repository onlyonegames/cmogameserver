package com.onlyonegames.eternalfantasia.domain.controller.developer;

import com.onlyonegames.eternalfantasia.domain.MyCustomException;
import com.onlyonegames.eternalfantasia.domain.ResponseErrorCode;
import com.onlyonegames.eternalfantasia.domain.model.dto.ChapterSaveDto.ChapterSaveData;
import com.onlyonegames.eternalfantasia.domain.model.dto.StagePlayDataDto;
import com.onlyonegames.eternalfantasia.domain.model.entity.MyChapterSaveData;
import com.onlyonegames.eternalfantasia.domain.model.entity.StagePlayData;
import com.onlyonegames.eternalfantasia.domain.repository.MyChapterSaveDataRepository;
import com.onlyonegames.eternalfantasia.domain.service.ErrorLoggingService;
import com.onlyonegames.eternalfantasia.etc.JsonStringHerlper;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Map;

import static com.onlyonegames.eternalfantasia.EternalfantasiaApplication.IS_DIRECT_WRIGHDB;

@AllArgsConstructor
@Service
@Transactional
public class AllChapterOpenTestService {
    private final MyChapterSaveDataRepository myChapterSaveDataRepository;
    private final ErrorLoggingService errorLoggingService;

    public Map<String, Object> AllChapterOpen(Long userId, Map<String, Object> map) {

        MyChapterSaveData myChapterSaveData = myChapterSaveDataRepository.findByUseridUser(userId)
                .orElse(null);
        if(myChapterSaveData == null) {
            errorLoggingService.SetErrorLog(userId, ResponseErrorCode.NOT_FIND_DATA.getIntegerValue(), "[Developer] Fail! -> Cause: MyChapterSaveData not find.", this.getClass().getSimpleName(), Thread.currentThread().getStackTrace()[1].getMethodName(), IS_DIRECT_WRIGHDB);
            throw new MyCustomException("[Developer] Fail! -> Cause: MyChapterSaveData not find.", ResponseErrorCode.NOT_FIND_DATA);
        }
        String saveDataString = myChapterSaveData.getSaveDataValue();
        ChapterSaveData chapterSaveData = JsonStringHerlper.ReadValueFromJson(saveDataString, ChapterSaveData.class);
        for(ChapterSaveData.ChapterPlayInfo chapterPlayInfo : chapterSaveData.chapterData.chapterPlayInfosList) {
            if(chapterPlayInfo.chapterNo < 9)
                chapterPlayInfo.isOpend = true;
            else
                chapterPlayInfo.isOpend = true;
            for(ChapterSaveData.StagePlayInfo stagePlayInfo : chapterPlayInfo.stagePlayInfosList){
                if(chapterPlayInfo.chapterNo < 8) {
                    stagePlayInfo.isOpend = true;
                    stagePlayInfo.isCleared = true;
                    stagePlayInfo.isGettedStar1 = true;
                    stagePlayInfo.isGettedStar2 = true;
                    stagePlayInfo.isGettedStar3 = true;
                }
                else if(chapterPlayInfo.chapterNo == 8 && stagePlayInfo.stageNo < 5) {
                    stagePlayInfo.isOpend = true;
                    stagePlayInfo.isCleared = true;
                    stagePlayInfo.isGettedStar1 = true;
                    stagePlayInfo.isGettedStar2 = true;
                    stagePlayInfo.isGettedStar3 = true;
                }
                else if(chapterPlayInfo.chapterNo == 8 && stagePlayInfo.stageNo == 5) {
                    stagePlayInfo.isOpend = true;
                    stagePlayInfo.isCleared = true;
                    stagePlayInfo.isGettedStar1 = true;
                    stagePlayInfo.isGettedStar2 = true;
                    stagePlayInfo.isGettedStar3 = true;
                }
                else {
                    stagePlayInfo.isOpend = true;
                    stagePlayInfo.isCleared = true;
                    stagePlayInfo.isGettedStar1 = true;
                    stagePlayInfo.isGettedStar2 = true;
                    stagePlayInfo.isGettedStar3 = true;
                }
            }
        }
        saveDataString = JsonStringHerlper.WriteValueAsStringFromData(chapterSaveData);
        myChapterSaveData.ResetSaveDataValue(saveDataString);
        map.put("myChapterSaveData", myChapterSaveData);

        return map;
    }

    public Map<String, Object> NomalModeLastChapterOpen(Long userId, Map<String, Object> map) {

        MyChapterSaveData myChapterSaveData = myChapterSaveDataRepository.findByUseridUser(userId)
                .orElse(null);
        if(myChapterSaveData == null) {
            errorLoggingService.SetErrorLog(userId, ResponseErrorCode.NOT_FIND_DATA.getIntegerValue(), "[Developer] Fail! -> Cause: MyChapterSaveData not find.", this.getClass().getSimpleName(), Thread.currentThread().getStackTrace()[1].getMethodName(), IS_DIRECT_WRIGHDB);
            throw new MyCustomException("[Developer] Fail! -> Cause: MyChapterSaveData not find.", ResponseErrorCode.NOT_FIND_DATA);
        }
        String saveDataString = myChapterSaveData.getSaveDataValue();
        ChapterSaveData chapterSaveData = JsonStringHerlper.ReadValueFromJson(saveDataString, ChapterSaveData.class);
        for(ChapterSaveData.ChapterPlayInfo chapterPlayInfo : chapterSaveData.chapterData.chapterPlayInfosList) {
            if(chapterPlayInfo.chapterNo == 8)
                break;
            chapterPlayInfo.isOpend = true;
            for(ChapterSaveData.StagePlayInfo stagePlayInfo : chapterPlayInfo.stagePlayInfosList){
                if(chapterPlayInfo.chapterNo == 7 && stagePlayInfo.stageNo == 20) {
                    stagePlayInfo.isOpend = true;
                    stagePlayInfo.isCleared = false;
                    stagePlayInfo.isGettedStar1 = false;
                    stagePlayInfo.isGettedStar2 = false;
                    stagePlayInfo.isGettedStar3 = false;
                }
                else {
                    stagePlayInfo.isOpend = true;
                    stagePlayInfo.isCleared = true;
                    stagePlayInfo.isGettedStar1 = true;
                    stagePlayInfo.isGettedStar2 = true;
                    stagePlayInfo.isGettedStar3 = true;
                }
            }
        }
        saveDataString = JsonStringHerlper.WriteValueAsStringFromData(chapterSaveData);
        myChapterSaveData.ResetSaveDataValue(saveDataString);
        map.put("myChapterSaveData", myChapterSaveData);

        return map;
    }
}
